{"version":3,"sources":["components/Header.js","components/SearchBar.js","components/EmployeeListItem.js","components/ClassEmployeeList.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","variant","children","content","SearchBar","handleChange","type","placeholder","onChange","EmployeeListItem","onClick","onListItemClick","user","key","id","first_name","last_name","disabled","checked","is_manager","email","hire_year","color","ClassEmployeeList","handleClick","setState","selectedUser","detailsTitle","handleYearChange","event","yearFilter","parseInt","target","value","state","showManagers","showEveryone","this","searchTerm","list","filter","item","toLowerCase","includes","map","name","htmlFor","defaultValue","Component","App","onSearchChange","otherProp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gOAOeA,G,MAND,SAACC,GAEX,OAAO,4BAAQC,UAAWD,EAAME,SAAW,KAAMF,EAAMG,SAAWH,EAAMG,SAAUH,EAAMI,QAAjF,OCWIC,EAZE,SAACL,GAAU,IACrBM,EAAcN,EAAdM,aACP,OAEA,yBAAKL,UAAU,aACX,2BAAOA,UAAU,YAAYM,KAAK,OAAOC,YAAY,SAASC,SAAUH,MCU7DI,EAfU,SAAAV,GACvB,OACE,wBACAC,UAAU,WACRU,QAAS,WACPX,EAAMY,gBAAgBZ,EAAMa,OAE9BC,IAAKd,EAAMe,IAEb,kCAAQf,EAAMa,KAAKG,WAAnB,IAAgChB,EAAMa,KAAKI,WACzC,0CAAe,2BAAOV,KAAK,WAAWW,UAAQ,EAACC,QAASnB,EAAMa,KAAKO,gBCTnEP,EAAO,CACX,CACEE,GAAI,EACJC,WAAY,UACZC,UAAW,WACXI,MAAO,oBACPD,YAAY,EACZE,UAAW,KACXC,MAAO,SAET,CACER,GAAI,EACJC,WAAY,OACZC,UAAW,WACXI,MAAO,kBACPD,YAAY,EACZE,UAAW,KACXC,MAAO,SAET,CACER,GAAI,EACJC,WAAY,QACZC,UAAW,cACXI,MAAO,kBACPD,YAAY,EACZE,UAAW,KACXC,MAAO,SAuHIC,E,kDAlHb,WAAYxB,GAAQ,IAAD,8BACjB,cAAMA,IAURyB,YAAc,SAACZ,GAAD,OACZ,EAAKa,SAAS,CACZC,aAAcd,EACde,aAAc,QAAUf,EAAKG,cAdd,EAiBnBa,iBAAmB,SAACC,GAAD,OACjB,EAAKJ,SAAS,CACZK,WAAYC,SAASF,EAAMG,OAAOC,QAAU,MAjB9C,EAAKC,MAAQ,CACXP,aAAc,GACdD,aAAc,GACdS,cAAc,EACdC,cAAc,EACdN,WAAY,IAPG,E,qDAsBT,IAAD,SAOHO,KAAKH,MALPR,EAFK,EAELA,aACAC,EAHK,EAGLA,aACAQ,EAJK,EAILA,aACAC,EALK,EAKLA,aACAN,EANK,EAMLA,WAEMQ,EAAeD,KAAKtC,MAApBuC,WAEJC,EAAO3B,EACR4B,QAAO,SAACC,GAAD,OACLA,EAAK1B,WAAa,IAAM0B,EAAKzB,WAC3B0B,cACAC,SAASL,EAAWI,kBAExBF,QAAO,SAACC,GAAD,OAAWX,GAAcA,IAAeW,EAAKpB,aAiBvD,OAfKe,IACHG,EAAOA,EAAKC,QACV,SAACC,GAAD,OACGA,EAAKtB,YAAcgB,IAClBM,EAAKtB,aAAegB,MAG5BI,EAAOA,EAAKK,KAAI,SAACH,GAAD,OACd,kBAAC,EAAD,CACE5B,IAAK4B,EAAK3B,GACVH,gBAAiB,EAAKa,YACtBZ,KAAM6B,OAKR,6BACE,2BACE,2BACE3B,GAAG,kBACHR,KAAK,QACLuC,KAAK,SACL3B,QAASiB,IAAiBC,EAC1B5B,SAAU,kBACR,EAAKiB,SAAS,CAAEU,cAAc,EAAMC,cAAc,OAGtD,2BAAOU,QAAQ,mBAAf,iBAEA,2BACEhC,GAAG,mBACHR,KAAK,QACLuC,KAAK,SACL3B,SAAUiB,IAAiBC,EAC3B5B,SAAU,kBACR,EAAKiB,SAAS,CAAEU,cAAc,EAAOC,cAAc,OAGvD,2BAAOU,QAAQ,oBAAf,kBAEA,2BACEhC,GAAG,kBACHR,KAAK,QACLuC,KAAK,SACL3B,QAASkB,EACT5B,SAAU,kBAAM,EAAKiB,SAAS,CAAEW,cAAc,OAEhD,2BAAOU,QAAQ,mBAAf,aAEF,2BACE,2BAAOA,QAAQ,QAAf,uBACA,4BAAQhC,GAAG,OAAON,SAAU6B,KAAKT,iBAAkBmB,aAAa,IAC9D,4BAAQd,MAAM,IAAd,aACCrB,EAAKgC,KAAI,SAACH,GAAD,OACR,4BAAQ5B,IAAK4B,EAAK3B,GAAImB,MAAOQ,EAAKpB,WAC/BoB,EAAKpB,gBAKd,4BAAKM,GACL,yBAAK3B,UAAU,SAASuC,GAExB,6CAAmBD,GAClBZ,EAAaZ,GACZ,6BAAMY,EAAaN,OAEnB,2D,GA5GsB4B,aCShBC,G,iNA1Bdf,MAAO,CACLI,WAAW,K,EAEbY,eAAe,SAACrB,GACf,EAAKJ,SAAS,CAACa,WAAWT,EAAMG,OAAOC,MAAMS,iB,uDAK9C,OACE,yBAAK1C,UAAU,OAChB,kBAAC,EAAD,CAAQC,QAAQ,QAEd,mDAKF,6BACA,kBAAC,EAAD,CAAWI,aAAcgC,KAAKa,iBAC9B,kBAAC,EAAD,CAAmBZ,WAAYD,KAAKH,MAAMI,WAAYa,WAAW,S,GArBhDH,cCHAI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.64c67289.chunk.js","sourcesContent":["import React from \"react\"\r\nconst Header =(props)=>{\r\n \r\n    return <header className={props.variant || \" \"}>{props.children ? props.children :props.content} </header>\r\n   \r\n};\r\n \r\nexport default Header;","import React from \"react\"\r\n \r\nconst SearchBar =(props) =>{\r\nconst {handleChange}=props;\r\nreturn (\r\n \r\n<div className='searchBox'>\r\n    <input className=\"SearchBar\" type=\"text\" placeholder=\"Search\" onChange={handleChange}/>\r\n</div>\r\n \r\n)\r\n \r\n}\r\n \r\nexport default SearchBar;","import React from \"react\";\r\n \r\nconst EmployeeListItem = props => {\r\n  return (\r\n    <li\r\n    className=\"ListItem\"\r\n      onClick={() => {\r\n        props.onListItemClick(props.user);\r\n      }}\r\n      key={props.id}\r\n    >\r\n    <span> {props.user.first_name} {props.user.last_name}</span> \r\n      <label>Manager <input type=\"checkbox\" disabled checked={props.user.is_manager}/></label>\r\n    </li>\r\n  );\r\n};\r\n \r\nexport default EmployeeListItem;","import React, { Component } from \"react\";\r\nimport EmployeeListItem from \"./EmployeeListItem\";\r\n\r\nconst user = [\r\n  {\r\n    id: 1,\r\n    first_name: \"Fremont\",\r\n    last_name: \"Chesswas\",\r\n    email: \"framont@gmail.com\",\r\n    is_manager: true,\r\n    hire_year: 2010,\r\n    color: \"green\",\r\n  },\r\n  {\r\n    id: 2,\r\n    first_name: \"Ezri\",\r\n    last_name: \"Bagworth\",\r\n    email: \"ezrit@gmail.com\",\r\n    is_manager: false,\r\n    hire_year: 2012,\r\n    color: \"black\",\r\n  },\r\n  {\r\n    id: 3,\r\n    first_name: \"Arvie\",\r\n    last_name: \"Copplestone\",\r\n    email: \"arvie@gmail.com\",\r\n    is_manager: true,\r\n    hire_year: 2018,\r\n    color: \"blue\",\r\n  },\r\n];\r\n\r\nclass ClassEmployeeList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      detailsTitle: \"\",\r\n      selectedUser: {},\r\n      showManagers: false,\r\n      showEveryone: false,\r\n      yearFilter: \"\",\r\n    };\r\n  }\r\n\r\n  handleClick = (user) =>\r\n    this.setState({\r\n      selectedUser: user,\r\n      detailsTitle: \"User \" + user.first_name,\r\n    });\r\n\r\n  handleYearChange = (event) =>\r\n    this.setState({\r\n      yearFilter: parseInt(event.target.value) || \"\",\r\n    });\r\n\r\n  render() {\r\n    const {\r\n      selectedUser,\r\n      detailsTitle,\r\n      showManagers,\r\n      showEveryone,\r\n      yearFilter,\r\n    } = this.state;\r\n    const { searchTerm } = this.props;\r\n\r\n    let list = user\r\n      .filter((item) =>\r\n        (item.first_name + \" \" + item.last_name)\r\n          .toLowerCase()\r\n          .includes(searchTerm.toLowerCase())\r\n      )\r\n      .filter((item) => !yearFilter || yearFilter === item.hire_year);\r\n\r\n    if (!showEveryone)\r\n      list = list.filter(\r\n        (item) =>\r\n          (item.is_manager && showManagers) ||\r\n          (!item.is_manager && !showManagers)\r\n      );\r\n\r\n    list = list.map((item) => (\r\n      <EmployeeListItem\r\n        key={item.id}\r\n        onListItemClick={this.handleClick}\r\n        user={item}\r\n      />\r\n    ));\r\n\r\n    return (\r\n      <div>\r\n        <p>\r\n          <input\r\n            id=\"filter_managers\"\r\n            type=\"radio\"\r\n            name=\"filter\"\r\n            checked={showManagers && !showEveryone}\r\n            onChange={() =>\r\n              this.setState({ showManagers: true, showEveryone: false })\r\n            }\r\n          />\r\n          <label htmlFor=\"filter_managers\">Only managers</label>\r\n\r\n          <input\r\n            id=\"filter_employees\"\r\n            type=\"radio\"\r\n            name=\"filter\"\r\n            checked={!showManagers && !showEveryone}\r\n            onChange={() =>\r\n              this.setState({ showManagers: false, showEveryone: false })\r\n            }\r\n          />\r\n          <label htmlFor=\"filter_employees\">Only employees</label>\r\n\r\n          <input\r\n            id=\"filter_everyone\"\r\n            type=\"radio\"\r\n            name=\"filter\"\r\n            checked={showEveryone}\r\n            onChange={() => this.setState({ showEveryone: true })}\r\n          />\r\n          <label htmlFor=\"filter_everyone\">Everyone</label>\r\n        </p>\r\n        <p>\r\n          <label htmlFor=\"year\">Filter by hire year</label>\r\n          <select id=\"year\" onChange={this.handleYearChange} defaultValue=\"\">\r\n            <option value=\"\">All years</option>\r\n            {user.map((item) => (\r\n              <option key={item.id} value={item.hire_year}>\r\n                {item.hire_year}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </p>\r\n        <h1>{detailsTitle}</h1>\r\n        <div className=\"lista\">{list}</div>\r\n\r\n        <div>Search term: {searchTerm}</div>\r\n        {selectedUser.id ? (\r\n          <div>{selectedUser.email}</div>\r\n        ) : (\r\n          <div>Select a user to view</div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ClassEmployeeList;\r\n","import React, {Component} from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport SearchBar from \"./components/SearchBar\";\nimport ClassEmployeeList from \"./components/ClassEmployeeList\"\nimport EmployeeList from \"./components/EmployeeList\";\n \n \n \n// function AppHeader(props){\n//   return( <header className=\"App-header\">\n \n//     The time is : {props.time.toISOString()}\n//   </header>)\n// }\nclass App  extends  Component {\n  state ={\n    searchTerm:\" \"\n  }\n  onSearchChange=(event) =>{\n   this.setState({searchTerm:event.target.value.toLowerCase()})\n  }\n  render(){\n   \n    // const time =new Date()\n  return (\n    <div className=\"App\">\n   <Header variant=\"blue\">\n   \n     <h3>Employee directory</h3>\n     \n   </Header>\n   \n \n   <br/>\n   <SearchBar handleChange={this.onSearchChange}/>\n   <ClassEmployeeList searchTerm={this.state.searchTerm} otherProp={true}/>\n   </div>\n  );\n}\n}\n \nexport  default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}